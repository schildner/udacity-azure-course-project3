name: Azure Pipelines
variables:
  # Azure Resource Manager service connection for pipelines
  azureServiceConnectionId: '02cc2bd2-9ade-452a-94a7-4052dfd43b29'

  # Python version: 3.7.6
  python.version: '3.7.6'

  # Agent VM image name
  vmImageName: 'myPackerImage'

  # Web app name
  webAppName: 'udacity-azure-course-project3-test-app-AppService'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-20.04
    steps:

    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: '$(udacityPubKey)'
        sshKeySecureFile: 'udacity_id_rsa'

    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'udacity_id_rsa.pub'
        
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.14.7'

    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        backendServiceArm: 'anja-subscription-service-connection'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate19841'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform-project3.tfstate'
    
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: 'anja-subscription-service-connection'

    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: 'anja-subscription-service-connection'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'starter-files/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: ubuntu-20.04
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'anja-subscription-service-connection'
              appName: $(webAppName)
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

  - deployment: VMDeploy
    displayName: 'Deploy VM'
    environment:
      name:  'TEST'
      resourceType: VirtualMachine
      tags: project_name="QA" stage="Submission"
    strategy:
      runOnce:
        deploy:
          steps:

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
              
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:some/path
